import json  # Importe a biblioteca json
import os  # Importe a biblioteca os

from django.shortcuts import render
from rest_framework import status
from rest_framework.response import Response
from rest_framework.views import APIView

from .utils import send_whatsapp_message

# Create your views here.
# chatbot/views.py


# Defina seu Token de Verifica√ß√£o aqui. Deve ser uma string longa e secreta.
# √â uma boa pr√°tica carreg√°-lo de uma vari√°vel de ambiente.
VERIFY_TOKEN = os.environ.get('WHATSAPP_VERIFY_TOKEN') # Token de verifica√ß√£o do Webhook (esta no .env)

class WebhookView(APIView):
    """
    Esta view manipula as requisi√ß√µes que a Meta envia para nosso webhook.
    """
    def get(self, request):
        """
        Este √© o primeiro passo da configura√ß√£o do Webhook na Meta.
        A Meta envia uma requisi√ß√£o GET para verificar se nossa URL √© v√°lida.
        """
        print("Recebida requisi√ß√£o GET para verifica√ß√£o do Webhook...")

        # Extrai os par√¢metros da requisi√ß√£o
        mode = request.query_params.get('hub.mode')
        token = request.query_params.get('hub.verify_token')
        challenge = request.query_params.get('hub.challenge')

        # Verifica se o 'mode' √© 'subscribe' e se o token corresponde ao nosso
        if mode == 'subscribe' and token == VERIFY_TOKEN:
            print("Verifica√ß√£o do Webhook bem-sucedida. Retornando o challenge.")
            return Response(int(challenge), status=status.HTTP_200_OK)
        else:
            # Se a verifica√ß√£o falhar, retorna um erro
            print("Verifica√ß√£o do Webhook falhou.")
            return Response(status=status.HTTP_403_FORBIDDEN)

    def post(self, request):
        """
        Este m√©todo √© chamado quando a Meta nos envia dados de uma mensagem real.
        """
        print("\nRecebida requisi√ß√£o POST (nova mensagem)...")

        # O corpo da requisi√ß√£o vem como bytes, ent√£o o decodificamos
        body_unicode = request.body.decode('utf-8')
        data = json.loads(body_unicode)

        # Imprimimos o corpo da mensagem para depura√ß√£o.
        # Use json.dumps para formatar a sa√≠da e torn√°-la leg√≠vel.
        #print(json.dumps(data, indent=2))

        # #####################################################################
        # AQUI COME√áA A L√ìGICA DO SEU CHATBOT
        # #####################################################################
        
        # Processa os dados recebidos do WhatsApp
        try:
            # Verifica se √© uma mensagem do WhatsApp Business
            if data['object'] == 'whatsapp_business_account':
                for entry in data['entry']:
                    for change in entry['changes']:
                        value = change['value']
                        
                        # Verifica se cont√©m mensagens (mensagem real do usu√°rio)
                        if 'messages' in value:
                            metadata = value['metadata']
                            phone_number_id = metadata['phone_number_id']
                            display_phone_number = metadata['display_phone_number']
                            
                            print(f"üì± N√∫mero de telefone ID: {phone_number_id}")
                            print(f"üì± N√∫mero de exibi√ß√£o: {display_phone_number}")
                            
                            for message in value['messages']:
                                from_number = message['from']
                                message_id = message['id']
                                timestamp = message['timestamp']
                                message_type = message['type']
                                
                                print(f"üí¨ NOVA MENSAGEM de: {from_number}")
                                print(f"üí¨ ID da mensagem: {message_id}")
                                print(f"üí¨ Timestamp: {timestamp}")
                                print(f"üí¨ Tipo: {message_type}")
                                
                                # Processa diferentes tipos de mensagem
                                if message_type == 'text':
                                    message_text = message['text']['body']
                                    print(f"üí¨ Texto: {message_text}")
                                    
                                    # ######################################################
                                    # ##### AQUI A M√ÅGICA ACONTECE: ENVIANDO A RESPOSTA ####
                                    # ######################################################
                                    response_text = f"Voc√™ disse: {message_text}"
                                    print(f"ü§ñ Enviando resposta para {from_number}: {response_text}")
                                    send_whatsapp_message(from_number, response_text)
                                
                                elif message_type == 'image':
                                    print("Imagem recebida")
                                elif message_type == 'audio':
                                    print("√Åudio recebido")
                                elif message_type == 'document':
                                    print("Documento recebido")
                        
                        # Verifica se cont√©m status de entrega/leitura (n√£o precisa responder)
                        elif 'statuses' in value:
                            metadata = value['metadata']
                            phone_number_id = metadata['phone_number_id']
                            display_phone_number = metadata['display_phone_number']
                            
                            print(f"üìã Status de entrega recebido do n√∫mero: {display_phone_number}")
                            
                            for status_info in value['statuses']:
                                message_id = status_info['id']
                                status_type = status_info['status']
                                timestamp = status_info['timestamp']
                                recipient_id = status_info['recipient_id']
                                
                                print(f"üìã Status da mensagem {message_id}: {status_type}")
                                print(f"üìã Para: {recipient_id}")
                                print(f"üìã Timestamp: {timestamp}")
                                print("üìã (Status de entrega - n√£o necessita resposta)")

        except KeyError as e:
            # Se a estrutura do JSON for diferente, apenas registre o erro
            print(f"Erro ao processar a mensagem: Chave n√£o encontrada. Erro: {e}")
            print(f"Dados recebidos: {json.dumps(data, indent=2)}")
        except Exception as e:
            # Captura qualquer outra exce√ß√£o que possa ocorrer
            print(f"Erro inesperado ao processar a mensagem: {e}")
            print(f"Dados recebidos: {json.dumps(data, indent=2)}")
            pass

        # #####################################################################
        # FIM DA L√ìGICA DO CHATBOT
        # #####################################################################

        # A Meta espera uma resposta 200 OK para saber que recebemos a mensagem.
        return Response(status=status.HTTP_200_OK)